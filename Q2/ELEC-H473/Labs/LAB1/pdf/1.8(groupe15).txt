movi 4,0X0000//number1
movi 3,0XFFFF
movi 6,0X0000//number2
movi 5,0XFFFF




add 1,3,5
sw 1,0,0 // the result of low 16 bit addition
add 1,4,6
sw 1,0,1 // the result of high 16 bit addition



movi 1,0x8000
sw 1,0,2 // mask
movi 1,0x7FFF
sw 1,0,3 // comparator



lw 2,0,0 // R2 load result of low 16 bit addition
lw 7,0,2 // R7 load mask

nand 1,3,7
sw 1,0,4  // verify the MSB of low 16 bit of the first number
nand 1,5,7 
sw 1,0,5   // verify the MSB of low 16 bit of the second number
nand 1,2,7 
sw 1,0,6   // verify the MSB of low 16 bit result



lw 1,0,4
lw 2,0,3 // R2 comparator
beq 1,2, one // one :MSB of low 16 bits of the first number is equal to 1
lw 1,0,5    // if not, verify the MSB of low 16 bits of the second number
beq 1,2, two
lw 4,0,1   // if the MSB of none of them is equal to 1
lw 3,0,0
halt



one: lw 1,0,5    // in the case where MSB of low 16 bits of the first number is equal to 1
beq 1,2, double1 // if both R3 MSB=1 AND R5 MSB=1
lw 1,0,6
beq 1,2, thr   // if the result =1
lw 1,0,1
addi 1,1,1
sw 1,0,1
lw 4,0,1
lw 3,0,0
halt



two: lw 1,0,4
beq 1,2, double1 // R3 MSB=1 AND R5 MSB=1
lw 1,0,6
beq 1,2,thr
lw 1,0,1
addi 1,1,1
sw 1,0,1
lw 4,0,1
lw 3,0,0
halt



thr: lw 4,0,1
lw 3,0,0
halt



double1: lw 1,0,1
addi 1,1,1
sw 1,0,1
lw 4,0,1
lw 3,0,0
halt